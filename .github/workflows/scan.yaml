name: Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '18 10 * * 3'

jobs:
  fossa:
    name: FOSSA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run FOSSA scan and upload build data
        uses: fossa-contrib/fossa-action@v1
        with:
          # FOSSA Push-Only API Token
          fossa-api-key: ${{ secrets.FOSSA_API_KEY }}
          github-token: ${{ secrets.GH_TOKEN }}

  docker:
    name: Docker build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build a Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: test-security-tools:${{ github.sha }}
          outputs: type=docker,dest=/tmp/myimage.tar
      - name: Upload test-security-tools image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-security-tools
          path: /tmp/test-security-tools.tar

  snyk:
    name: Snyk
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Download artifacts (Docker images) from previous workflows
        uses: actions/download-artifact@v2
      - name: Load Docker images from previous workflows
        run: |
          docker load --input test-security-tools.tar
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          image: test-security-tools:${{ github.sha }}
          args: --file=Dockerfile

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

  trivy:
    name: Trivy
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Download artifacts (Docker images) from previous workflows
        uses: actions/download-artifact@v2
      - name: Load Docker images from previous workflows
        run: |
          docker load --input test-security-tools.tar
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-security-tools:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

  codeql:
    name: CodeQL
    needs: snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1